#!/usr/local/bin/omi
#FUNICIONES:
~ add (a){ return this->num + a; }
~ sub (a){ return this->num - a; }
~ prod (a){ return this->num * a; }
~ div (a){ 
	if(a) 
		return this->num / a; 
	else
		<< "Error";
}

#DEFINICIONES DE COMPONENTES
def icon {
	nombre k> TEXT;
	run => ~ (txt = "") { << txt . this->nombre; };
} !exist {
	<< "EL COMPONENTE ES NUEVO";
	$(2){
		=: icon {
			nombre key> {
				"CASITA",
				"TREN"
			}[$];
		}
	}
} from "icons.db";

def graph {
	x => INT;
	y => INT;
	w => INT;
	h => INT;
}

~ run (c) { # PARAMETRO COMPONENTE ICON
	c->run("SE PASO COMO PARAM: ");
}

def img {
	name => TEXT;
	_str => ~() {
		return "¿Quién soy? ".this->name;
	};
}

def square {
	num => INT;
	color => TEXT {"AA00CC"}; #Valor por defecto
	paridad => TEXT;
	icons []> icon;
	graph &> graph;  
	imprimirfoto => ~ () { echo "Una foto chula"; };
	sum => ~(a,b) { return a + b; };
	add => ~&add;
	sub => ~&sub;
	div => ~&div;
	prod => ~&prod;
	isok => ~(a) { return (this->num < 10) or a; };
	isok2 => ~(a) { return (this->paridad == ((!((a  + 1)%2))?"impar":"par") AND true); };
	image &> img;
} 
#~ 
def board {
	nombre => TEXT;
	squares []> square;
}

$(16) {
	=: graph {
		x => (($%4)*10);
		y => ((int($/4))*10);
		w => 10;
		h => 10;
	}
}

#COMPONENTES
=: board {
	nombre => "LA OCA";
	squares {
		$(16) {
			=: square {
				num => $;
				if ($ == 3) color => "0".$."3".$.$."0"; 
				#else color => "0".$."3".$.$."0";
				paridad => ((this->num%2)?"impar":"par");
				icons {
					=: S(icon, ($%2) + 1);
				}
				i = $ + 1;
				graph => graph@i;
				image =: img { 
					name => {
						"Soy una casa",
						"Soy un pueblo",
						"Soy una isla",
						"Soy algo desconocido",
						"Soy un monstruo",
						"Soy una estación",
						"Soy algo feo",
						"No soy"
					}[$%8]; 
				}
			}
		}
	}
}

<< "SELECT";
<< S(square);
<< square@2;
<< S(square,2);

<< "ACCESO DIRECTO";
<< square@1['num'];
square@1->num = 10;
<< square@1['num'];

<< "ACCESO INDIRECTO";
<< S(square)[0]['num'];
S(square)[0]['num'] = 11;
<< square@1->num;

<< "DIRECTO CON BUCLE";
$(S(square)) $['num'] = 8;
<< S(square);

<< "INDIRECTO CON BUCLE";
$(10)S(square)[$]['num'] = 11;
<< S(square);

<< "DELETE";
D(square, "id > 4 AND id < 6 ");
<< S(square);

<< "LLAMADAS A FUNCIONES";
<< square@4->sum(1,4);
a =  square@8;
<< a->num." + 5 = ".a->add(5); #this->num == 7; 
<< a->num." - 1 = ".a->sub (1); 
<< a->num." * 4 = ".a->prod (4);
<< a->num." / 2 = ".a->div (2);
<< a->num." / 0 = ".a->div (0);
<< a->sum(1,4);
a->imprimirfoto();
#~ 
<< "MODIFICACION";
a = square@1;
a['num'] = 10;
a['color'] = 'verde';
<< a;

<< "RELACIONES";
S(square, "color = 'verde'")[0]->icons[0]->run("icon: ");
board@1->squares[0]->icons[0]->nombre = "ALGO NUEVO";
a->icons[0]->run ("icon: ");

<< "MODIFICACION DE ATRIBUTO NO DEFINIDO";
a->ggggg = "AAA";
<< a;	
<< square@1;
 
<< "ORDEN";
<< S(square, "paridad = 'par' ORDER BY id DESC"); 
<< S(square, " ORDER BY id DESC");
#~ 
<< "MODIFICACION DE RELACIONES";
<< board@1->squares = S(square, "id = 3 OR id = 4 OR id = 5" );
<< board@1->squares;

$(board@1->squares[0]->icons) $->run("ICON:");
square@1->icons[0] = S(icon, 2)[0];
<< square@1->icons[0];
square@1->icons[0]->nombre = "OTRO NOMBRE";
<< square@1->icons[0];
#~ 
#~ 
<< "COMPONENTES COMO PARAMETROS DE FUNCION";
"run" (board@1->squares[0]->icons[0]);
#~ 
<< "RELACIONES DIRECTAS";
$(S(square))<< "X:".$->graph->x." Y:".$->graph['y']." W:".$->graph->w." H:".$->graph->h;
<< square@1->graph;
square@1->graph = square@2->graph;
<< square@1->graph;

<< "LECTURA DESDE BD DADA";

<< "ACCESO POR ID square@pepe";
a = "OTRO NOMBRE";
<< icon@"OTRO NOMBRE"->run("Icon:");
<< icon@a;
<< "VALORES DE ATRIBUTOS POR DEFECTO";
<< "BUSQUEDA SEGÚN FUNCIÓN DE COMPONENTE";
str = "2";
<< S(square, "(1 = 1 AND isok(0) AND 1 = 1 AND isok".str."(num)) OR 1 != 1");
<< "APLICAR FILTROS AL OBTENER LAS RELACIONAES";
<< board@1->squares["color = '33330'"][0] =  board@1->squares["color != '33330'"][0];
<< board@1->squares;
<< "SOBRECARGA DE FUNCIONES";
<< board@1->squares[0]->image;
$(S(square)) << $->image;


do {
	<< "Dime un número [0 para salir]";
	>> user_param;
	if (user_param)
		<< square@user_param;
} while (user_param);


#~ 
#~ 
<< "ELIMINACION RECURSIVA";
<< "ERROR DE FUNCION NO EXISTENTE << IMPLEMENTAR dadssda->dasdsaklsad();";

<< "HERENCIA LIKE";
def other_square like square {
	aux_name => INT;
}!exist {
	=: other_square{
		aux_name => 10;
		num => 30;
	}
} from "icons.db";
<<  S(other_square);
other_square@1->imprimirfoto ();

<< "HERENCIA EXTENDS";
def special_icon extends icon {
	nombre2 => "TEXT";
	run => ~(txt = ""){
		return this->nombre2 . "_special";
	};
}
def special_square extends square {
	special => TEXT;
	imprimirfoto => ~ () { echo "PAPAPAPPAPAPA".this->special; };
	special_icons []> icon;
}
def special2_square extends special_square {
	more_special => TEXT;
	imprimirfoto => ~ () { echo "POPOPOPOPOPOPO".this->more_special; };
}
def special22_square extends special_square {
	more_special2 => INT;
}

if (!exist special_icon) {
	<< "EL COMPONENTE ES NUEVO";
	=: special_icon {
		nombre => "ICON CHACHI";
		nombre2 => "SEGUNDO NOMBRE";
	}
}

=: square {
	num => 100;
}

=: special_square {
	num => 100;
	icons {
		<< a = special_icon@"ICON CHACHI";
		=: a;
	}
	special_icons {
		<< a = S(special_icon,3);
		=: a;
	}
	special => "ALGO ESPECIAL";
	
}
=: special2_square {
	num => 220;
	special => "ALGO ESPECIAL 2";
	more_special => 2;
}
=: special22_square {
	num => 2422;
	special => "ALGO ESPECIAL 22";
	more_special2 => 22;
}

$(S(square)) $->imprimirfoto();
$(S(special_square)) $->imprimirfoto ();
<< S(special2_square);
<< S(special22_square);
#~ 
$(S(square)) {
	<< $->icons[0];
}
$(S(square)) {
	if ($->icons)
		<< $->icons[0]->run("A: ");
}
<< "----";
$(S(special_square)) {
	if ($->icons)
		<< $->icons[0]->run("A: ");
}

$(S(icon)) {
	<< $->run("A: ");
}
$(S(square)) {
	if ($->special_icons)
		<< $->special_icons[0]->run();
}
$(S(square)) {
	if ($->special_icons)
		<< $->special_icons[0] = icon@"ALGO NUEVO";
}
$(S(square)) {
	if ($->special_icons)
		<< $->special_icons[0]->run("PROMPT: ");
}

D(special_square, "num = 2422");

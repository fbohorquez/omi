function mover_rey (tile) {
  return 
    abs(this->i - tile->i) < 2 &&  abs(this->j - tile->j) < 2 &&
    !"token_jugador_".((this->color + 1) %2)@[$->can_move(tile)] 
}

function move_reina (tile) {
  pos_i = tile->i + ((this->i - tile->i < 0)?-1:((this->i - tile->i == 0)?0:1));
  pos_j = tile->j + ((this->j - tile->j < 0)?-1:((this->j - tile->j == 0)?0:1));
  return 
    (
      abs(this->i - tile->i) == abs(this->j  - tile->j) ||
      this->i == tile->i || 
      this->j == tile->j 
    )&& 
    tile !@ "token_jugador_".this->color && 
    (this->i != tile->i || this->j != tile->j) &&
    this->can_move ("tile"@[$->i = pos_i && $->j = pos_j])
}

function move_caballo  (tile) {
  return 
    (
      (this->i == tile->i + 1 && (this->j == tile->j +2 || this->j == tile->j -2)) || 
      (this->i == tile->i + 2 && (this->j == tile->j +1 || this->j == tile->j -1)) || 
      (this->i == tile->i - 1 && (this->j == tile->j +2 || this->j == tile->j -2)) || 
      (this->i == tile->i - 2 && (this->j == tile->j +1 || this->j == tile->j -1))
    ) && tile !@ "token_jugador_".this->color && (this->i != tile->i || this->j != tile->j);
}

function move_torre  (tile) {
  pos_i = tile->i + ((this->i - tile->i < 0)?-1:((this->i - tile->i == 0)?0:1));
  pos_j = tile->j + ((this->j - tile->j < 0)?-1:((this->j - tile->j == 0)?0:1));
  return 
    (
      this->i == tile->i || 
      this->j == tile->j 
    )&& 
    tile !@ "token_jugador_".this->color && 
    (this->i != tile->i || this->j != tile->j) &&
    this->can_move ("tile"@[$->i = pos_i && $->j = pos_j])
}

function move_peon (tile) {
 dir = (this->color == 0)?1:-1;
  return 
    (
      (
        this->i + dir == tile->i || 
        this->j == tile->j 
      ) && !("token_jugador_".((this->color + 1) %2)@[$->can_move(tile)])
    )
}

function move_arfil (tile) {
  pos_i = tile->i + (this->i - tile->i < 0)?-1:1;
  pos_j = tile->j + (this->j - tile->j < 0)?-1:1;
  return 
    abs(this->i - tile->i) == abs(this->j  - tile->j) && 
    tile !@ "token_jugador_".this->color && 
    (this->i != tile->i || this->j != tile->j) &&
    this->can_move (tile@[$->i = pos_i && $->j = pos_j])
    
}

function comer (a, b){
   if (a->class == "token" && b->class == "tile"){
    color = (a->color + 1) % 2;
    "token_jugador_".color@[b @ $]->del = 1;
  }
}
move << comer;

function ganador (elem) {
  echo "El ganador es el jugador ".elem;
}
win << ganador;

function select_figura  (selects) {
  return select_elemento (selects, "figura");
}

function select_casilla  (selects) {
  return select_elemento (selects, "casilla");
}

function select_elemento (selects, label){
  do {
    echo "Seleccione una ".label." de las siguientes:\n";
    (elem in selects) {
      echo index(elem)." => ".elem.name."[".elem->i.",".elem->j."]\n";
    }
    get elem;
    if (elem < count(selects))
      return selects[elem];
    else 
      echo "Debe seleccionar una ".label." vÃ¡lida";
  } while (true);
}

function check_end () {
  rey_0 = "token_jugador_0"@[$->name = "rey_0"];
  rey_1 = "token_jugador_1"@[$->name = "rey_1"];
  if ("token_jugador_0"@[$->can_move (rey_1)])
    win 0;
  elseif ("token_jugador_1"@[$->can_move (rey_0)])
    win 1;
}

@ {
  name: "Ajedrez",
  players: 2,
  board {
    (i<8, j<8) {
      tile {
        name: "tile",
        color: ((i + j) % 2),
        'i': i,
        'j': j,
      }
    }
  }
  def token (i){
    class : token,
    color : i,
    del: 0,
    init  = function () {
      @move this to "tile"@[tile->i = $->i && tile->j = $->j];
    } 
  }
  (i<2) {
    "token_jugador_".i ext token (i){
      name: "rey_".i,
      'i': (i == 0)?0:7, 
      'j': 4, 
      can_move: move_rey,
    }
    "token_jugador_".i ext token (i){
      name: "reina_".i,
      'i': (i == 0)?0:7, 
      'j': 3, 
      can_move: move_rey,
    }
    (j<2) "token_jugador_".i ext token (i)  {
      name: "caballo_".i."_".j,
      'i': (i == 0)?0:7, 
      'j': (j == 0)?1:6, 
      can_move: move_caballo,
    }
    (j<2) "token_jugador_".i ext token (i)  {
      name: "torre_".i."_".j,
      'i': (i == 0)?0:7, 
      'j': (j == 0)?0:7, 
      can_move: move_torre,
    }
    (j<2) "token_jugador_".i ext token (i)  {
      name: "arfil_".i."_".j,
      'i': (i == 0)?0:7, 
      'j': (j == 0)?2:5, 
      can_move: move_arfil,
    }
    (j<8) "token_jugador_".i ext token (i)  {
      name: "peon_".i."_".j,
      'i': (i == 0)?1:6, 
      'j': j, 
      can_move: move_peon,
    }
  }
  init {
    "token"@[]->init();
  }
  game {
    (i < @players) {
      turn (i);
      check_end ();
    }
  }
  rule turn (i) {
      token = 
        (!mate(i))
          ?select_figura("token_jugador_".i@[$->del = 0])
          :"token_jugador_".i@[$->name = "rey_".i];
      tile = select_casilla("tile"@[token->can_move ($)]);
      @move token to tile;
  }
}

@play; 

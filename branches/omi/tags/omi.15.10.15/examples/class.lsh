#!/usr/local/bin/omi
<< "CLASES";
<< "#############################";
<< "Definición:";
class clase1 { 
  function hola () { 
    << "Hola mundo";
  }
  function out (a){
    << a;
  } 
  function inc (&a){
   a ++;
   return a;
  } 
  function anidada () {
    << "Esto es un método que...";
    this->anidada1 ();
  }
  function anidada1 () {
    << "Llama a otro";
  }
  function recursiva (a, &factorial){
    << "Función recursiva: ".a;
    if (a > 0){
      factorial *=  a;
      ~> (a - 1, factorial);
    }
    
  }
  function llamada (str){
    << "Soy clase1, me han llamado desde ".str;
  }
  function llamada_clase () {
    << "Me llamarón desde otra clase";
  }
  function mod (&a) {
    << "Soy clase 1 y voy a modificar ".a;
    a = a % 2;
  }
  atribute = 1;
}

class clase2 {
  function clase2 () {
      << "Costructor clase2";
  }
  function llamada (obj){
    obj->llamada ("clase2");
  }
  function metodo (){
    << "Método de clase2";
  }
  function mod (&a) {
    << "Soy clase 2 "."Me han pedido que modifique ".a;
    << "Pero no me fio y se lo paso a clase1";
    c = new clase1 ();
    c->mod (a); 
  }
  function llamada_clase () {
    << "Me llamarón desde clase 2";
  }
}
class clase3 {
  function clase3 (data) {
      this->atributo1 = 10;
      this->atributo2 = data;
  }
  function print1 (){
    << this->atributo1;
  }
  function print2 (){
    << this->atributo2;
  }
  function inc_db (&a){
    a ++;
    ++a;
    return a;
  }
  atributo1; atributo2;
}
global var_global;
global p;
var_global = 10;
function _global () {
  << "Variable global";
}
cp;
class clase4 {
  function vglobal () {
    var_global;
    << var_global;
  }
  function fglobal () {
    _global ();
  }
  function cglobal () {
    datinfo p;
    p = new clase1 ();
    datinfo p;
    p->llamada_clase ();
  }
  function global_asig () {
    var_global = 30;
  }
  function global_asig_class () {
    p = new clase2();
    p->metodo();
  }
}
var5 = 2;
class clase5 {
  ~clase5 () {
      << "Constructor";
      << this->var5;
  }
  function pruebathis (obj){
    << obj->atributo1;
  }
  var5 = 10;
}
class clase6 {
  function clase6 () {
    this->atributo1 = 20;
  }
  function pruebathis (){
    c = new clase5 ();
    << "me envío a mi mismo";
    << "A otra clase";
    c->pruebathis (this);
    << "A mi misma clase";
    this->pruebathis2(this);
    << "Me llamo con this";
    this->pruebathis3(this);
    
  } 
  function pruebathis2 (obj){
    obj->atributo1 = 30;
    << obj->atributo1;
    << atributo1;
  }
  function pruebathis3 (obj){
    obj->atributo1 = 90;
    << obj->atributo1;
    << atributo1;
  }
  atributo1;
}

class prnt {
  function f_prnt (){
    this->atributo_p = 1;
  }
  function virtual () { << "VIRTUAL PARE"; }
  atributo_p = 10;
}
class child extends prnt {
  function f_child () {
    << this->atributo_p;
  }
  function f_child2 () {
    parent->f_prnt ();
    << this->atributo_p;
  }
  function virtual () {
    << "Virtual";
  }
}
<< "Inicialización";
#~ 
elem = new clase1();
<< "___________";
<< elem;
<< "LLamada a método";
elem->hola();
<< "ERROR [";
hola ();
<< "]";
elem->out ("Parámetro");
b = 5;
elem->inc (b);
<< b;
elem->anidada();

elem_aux = elem;
a[] = 1;
elem->recursiva (5, a[0]);
<< "El factorial de 5 es ".a[0];
c = new clase2();
<< "Constructor";
c = new clase2 ();
c->llamada (elem);
#~ 
cp;
c = new clase3 (90);
c->print1 ();
c->print2 ();
<< "Acceso a atributo";
<< c->atributo1;
c->atributo1 = 2;
<< c->atributo1;
<< c->atributo1++;
<< c->atributo1;
<< c->inc_db (c->atributo1);
<< c->atributo1;
while (c->atributo1 > 2){
  << c->atributo1--;
}
<< c->atributo1;
<< c->atributo2;
c->atributo2 = c->atributo1;
<< c->atributo1;
<< c->atributo2;
<< (c->atributo2) >= (c->atributo1);
if (c->atributo2 >= c->atributo1){
  << c->atributo2;
}
<< "Métodos";
p = new clase2 ();
num = 3;
p->mod (num);
#~ 
<< num;
g = new clase4 ();
g->fglobal();
#~ 
g->vglobal ();
<< p;
datinfo p;
g->cglobal ();
datinfo p;
<< p;
<< "La variable global vale ".var_global;
g->global_asig ();
<< "La variable global vale ".var_global;
<< "Asignación";
<< "A";
<< c;
<< p;
p = c;
#~ 
#~ << c->atributo1;
#~ << p->atributo1;
#~ p->atributo1 = 21;
#~ << c->atributo1;
#~ << p->atributo1;
#~ p = new clase1 ();
#~ p->hola();
#~ << c->atributo1;
#~ 
#~ g->global_asig_class ();
#~ << p->metodo();
#~ 
#~ c2 = new clase2 ();
#~ << c2;
#~ << "ERROR[";
#~ p->metodoinexistente();
#~ << "]";
#~ p = 10;
#~ << p;
#~ c = new clase5();
#~ << c;
#~ << c['var5'];
#~ << var5;
#~ c2 = new clase6 ();
#~ c2->pruebathis();
#~ << "Herencia";
#~ pa = new prnt ();
#~ 
c = new child ();
<< "ERROR: No existe clase";
#~ c2 = new child2 ();

c->f_child (1);
#~ 
c->f_child2 ();
<< "________-----____";
<< pa->atributo_p;
pa->virtual (); //NO DEBERIA HACER NADA <===============================================================================
c->virtual ();


c_aux = 20;
class c {
   static st_var = "10"; 
   static ~st_func () {
      << "Soy una función estática";
   }
   ~ c () {
      this->var_a = 20;
      << "Soy el constructor de la clase C";
      this->b_obj = new b ();
   }
   ~ hola () {
      << "Hola mundo";
   }
   ~ sum (x, y) {
      return x + y;
   }
   var_a = 10;
}

class b {
   ~ b () {
      this->var_a = 40;
      << "Soy el constructor de la clase B";
      this->a_obj = new a (100);
   }
   ~ getA () {
      return this->a_obj;
   }
}

class a {
   static var_a = 10;
   static ~func_a () {
      << "Soy un función estatica de la clase padre";
      static::f_child();
   }
   ~ a (val) {
      this->var_a = val;
      << "Soy el constructor de la clase A";
      << "ERROR[";
      parent->soy();
      << "]";
   }
   ~ sum (a, b) {
      return a + b;
   }
   ~ soy () {
      << "Soy A";
   }
   ~ solo () {
      << "Solo A";
   }
   ~ _str () {
      return "SOY UNA CLASE DERIVADA DE A";
   }
}
#~ 
c = new c ();
c->hola ();
<< "ERROR [";
hola();
<< "]";
<< c->var_a;
<< c->b_obj->var_a;
<< c->b_obj->a_obj->var_a;
<< c->b_obj->a_obj->sum(2,8);
<< c->b_obj->getA()->sum(2,8);
<< c->b_obj->getA()->var_a = 20;
<< c->b_obj->getA()->var_a;
<< c->b_obj->a_obj->var_a;

partial =  P[b=10] (c->b_obj->getA()->sum);

<< partial (20);
#~ 
<< c->sum (1,2);
<< "ERROR[";
<< sum (1,2);
<< "]";
#~ 
class ae extends a {
   static ~func_a () {
      << "Soy un función estatica de la clase hija";
      static::f_child();
      parent::func_a();
   }
   static stack = {};
   static top = -1;
   static ~push (elem) {
      ae::stack[++ae::top] = elem;
   }
   static ~pop () {
      ae::top --;
   }
   static ~get () {
      return ae::stack[ae::top];
   }
   ~ ae () {
      << "Soy el constructor de la clase a extendida";
      parent->a("20");
   }
   ~ sum (a,b) {
      return parent->sum(a, b + 2);
   }
   ~ soy () {
      << "Soy AE";
      << "Hijo de ";
      parent->soy();
      parent::func_a();
   }
   static ~f_child() {
      << "Soy el hijo";
   }
}
<< "------------";
class aee extends ae {
   static ~func_a () {
      << "Soy un función estatica de la clase hija 2";
      parent::func_a();
   }
   ~ aee () {
      << "Soy el constructor de la clase a extendida";
      parent->a("20"); # <<<------------------------------------- No se copia el constructor de A
      parent->ae();
      parent->solo();
   }
   static ~f_child() {
      << "Soy el hijo 2";
   }
   
   array = {1,2};
}
#~ #<<<----------------------------------- Probar pasar objeto como paramtero de método
<< "________A";
ae = new ae();
ae->soy();
#~ 
<< "________";
new ae()->soy();
<< "--------";
<< ae;
<< ae->sum(2,3);
c::st_func ();
<< "_____A>";
typeof a;
<< c::st_var + 40;
<< c::st_var = 40;
<< c::st_var . 40;
<< ae::var_a;
<< "_-_-_-_-";
aee::func_a();
<< "_-_-_-_-";
//Otro comentario
ae::push (10);
<< ae::stack;
<< ae::get();
ae::push (20);
<< ae::get();
<< ae::stack;
ae::push(100);
<< ae::stack;
<< ae::get();
ae::pop ();
<< ae::get(); 
<< "_______";
ae::pppppp = 10;
<< ae::pppppp;
<< "_______";
<< "AAAAAAAA";
a = new aee ();

<< a;
<< "____---bbbbbbbbbbbbbbbbbbbbbb---____";
class p { 
   ~ p () {
      << "Costructor P";
      << "ERROR[";
      parent->soy();
      << "]";
   }
   ~ soy () {
      << "SOY P";
       << "ERROR[";
      parent->soy();
      << "]";
   }
}
#~ 
class pp extends p{ 
   ~ pp () {
      << "Costructor PP";
      parent->p();
   }
   ~ soy () {
      << "Soy PP";
      parent->soy();
   }
    private ~priv () {
      << "Método privado padre";
   }
}

class ppp extends pp{ 
   ~ ppp () {
      << "Costructor PPP";
      parent->pp();
   }
   ~ soy () {
      << "Soy PPP";
      parent->soy ();
   }
   ~ callvar (obj) {
      return obj->getvar();
   }
   var = 10;
   ~ getvar() {
      return this->var;
   }
   ~getpriv () {
      this->priv();
   }
   private ~priv () {
      << "Método privado";
      parent->priv ();
   }
   private priv_var = 10 ;
   ~ get_priv_var () {
      return this->priv_var;
   }
   ~ set_priv_var (val) {
      this->priv_var = val;
   }
   ~ priv_obj (obj) {
      obj->priv();
   }
}
<< "____---bbbbbbbbbbbbbbbbbbbbbb---____";
q = new ppp ();
a = {11,22};
c = 0;
<< a[c];
q->soy();
<< "____------____";
p2 = new ppp ();
p2->var = 40;
<< q->callvar(p2);
#~ << p;
<< "ERROR[";
q->priv();
<< "]";

q->getpriv();
<< "ERROR[";
<< q->priv_var;
<< "]";
<< q->get_priv_var();
q->set_priv_var(40);
<< q->get_priv_var();
<< p2->get_priv_var();
q->priv_obj (p2);

datinfo q;
<< q;
v = q;
datinfo v;
datinfo v->var;
v->var = 20;
<< q;
datinfo v->var;

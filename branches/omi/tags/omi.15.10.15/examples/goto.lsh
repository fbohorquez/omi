#!/usr/local/bin/omi
#~ foo = 0;
#~ label: 
#~ << "Sentencia " << foo;
#~ if (foo < 10){
   #~ foo++;
   #~ goto label;
#~ }
#~ << "=========================";
#~ ~ex () {
   #~ $(10){
      #~ << $;
   #~ }
#~ }
#~ $({10,40,50}) {
   #~ << "----- " << $;
   #~ ex();
   #~ << "----- " << $;
#~ }
#~ func(); 
#~ 4 echo 5;
 #~ 4 echo 5;
 #~ 4 echo 5;
 #~ 4 echo 5;
#~ 
#~ fun();
#~ class gato {
   #~ private nombre; 
   #~ private raza;
   #~ static private apareados = 0;
   #~ ~ gato (nombre, raza) { 
     #~ this->nombre = nombre; 
     #~ this->raza = raza;
   #~ }
   #~ ~ aullar () { 
      #~ << "Miauuu";
   #~ }
   #~ ~ getNombre () {
      #~ return this->nombre;
   #~ }
   #~ ~ getRaza () {
      #~ return this->raza;
   #~ }
   #~ static ~ aparear (gato1, gato2, nombre = "Sin nombre") {
      #~ gato::apareados ++;
      #~ << "reproducciones: ".gato::apareados;
      #~ return new gato (nombre, gato::mezclarRaza (gato1, gato2)); 
   #~ }
   #~ private static ~ mezclarRaza (gato1, gato2) {
      #~ if (gato1->raza == gato2->raza) 
         #~ return gato1->raza;
      #~ else
         #~ return "Cruzado";
   #~ }
#~ }
#~ 
#~ mac = new gato ("MacAlistair", "Siamés"); 
#~ ada = new gato ("Ada", "Persa"); 
#~ max = new gato ("Max", "Persa"); 
#~ cria = gato::aparear (mac, ada, "Lerdorf");
#~ cria2 = gato::aparear (max, ada, "Lerdorf2");
#~ 
#~ cria->aullar(); 
#~ << cria->getRaza();
#~ 
#~ << cria->raza;
#~ << gato::mezclarRaza (mac, ler);
#~ << gato::apareados;


#~ class gato {
   #~ private nombre; 
   #~ private raza;
   #~ private energia = 100;
   #~ private hambre = 100;
   #~ static energia_min = -10;
   #~ static hambre_min = -10;
   #~ ~ gato (nombre, raza) { 
     #~ this->nombre = nombre; 
     #~ this->raza = raza;
   #~ }
   #~ ~ getNombre () {
      #~ return this->nombre;
   #~ }
   #~ ~ getRaza () {
      #~ return this->raza;
   #~ }
   #~ ~ aullar () { 
      #~ << "Miauuu";
   #~ }
   #~ ~ comer () {
      #~ this->hambre += 10;
      #~ << "El gato bebe leche";
   #~ }
   #~ ~ dormir () {
      #~ this->energia += 10;
      #~ << "El gato se va a la cama";
   #~ }
   #~ ~ jugar () {
      #~ if (this->energia <= 0 or this->hambre <= 0)
         #~ << "El gato ".this->nombre." no quiere jugar.";
      #~ else{
         #~ << "A ".this->nombre." le encanta jugar";
         #~ this->energia -= 10;
         #~ this->hambre -= 10;
      #~ }
   #~ }
   #~ static ~ pasar_tiempo (gatos, h = 1) {
      #~ if (h > 0) {
         #~ $(gatos) {
            #~ $->energia -= 10;
            #~ $->hambre -= (30 * h);
            #~ if ($->energia < gato::energia_min || $->hambre < gato::hambre_min)
               #~ << $->nombre." a pasado a un lugar mejor";
         #~ }
      #~ }else{
         #~ << "Imposible";
      #~ }
   #~ }
#~ }
#~ 
#~ mac = new gato ("MacAlistair", "Siamés"); 
#~ ada = new gato ("Ada", "Persa"); 
#~ max = new gato ("Max", "Persa"); 
#~ datInfo (mac);
#~ $(15) {
   #~ << "Gatos disponibles";
   #~ << "[0]=> ".mac->getNombre()." [".mac->getRaza()."] ";
   #~ << "[1]=> ".ada->getNombre()." [".ada->getRaza()."] ";
   #~ << "[2]=> ".max->getNombre()." [".max->getRaza()."] ";
   #~ << "[otro]=> Salir ";
   #~ >>["Seleccione un gato para interactuar:"] s;
   #~ switch (s) {
      #~ case 0: 
         #~ g = mac;
         #~ break;
      #~ case 1: 
         #~ g = ada;
         #~ break;
      #~ case 2:
         #~ g = max;
         #~ break;
      #~ default:
         #~ exit;
   #~ }
   #~ << "------------------------------------------------------------";
   #~ << "Acciones disponibles";
   #~ << "[0]=> Dormir ";
   #~ << "[1]=> Comer ";
   #~ << "[2]=> Jugar ";
   #~ << "[otro]=> Aullar ";
   #~ >>["Seleccione una acción:"] s;
   #~ switch (s) {
      #~ case 0: 
         #~ g->dormir();
         #~ break;
      #~ case 1: 
         #~ g->comer();
         #~ break;
      #~ case 2:
         #~ g->jugar();
         #~ break;
      #~ default:
         #~ g->aullar();
   #~ }
   #~ gato::pasar_tiempo ({mac, ada, max});
#~ }
#~ class mascota {
      #~ private nombre; 
      #~ private raza;
      #~ 
      #~ ~ mascota (nombre, raza) { 
        #~ this->nombre = nombre; 
        #~ this->raza = raza;
      #~ }
      #~ 
      #~ ~ getNombre () {
         #~ return this->nombre;
      #~ }
      #~ 
      #~ ~ getRaza () {
         #~ return this->raza;
      #~ }
      #~ 
      #~ ~ saludar () {
         #~ // Accede al atributo estático type definido en la clase hija
         #~ << "Hola soy ".this->nombre.", un ".static::type." ".this->raza;  
      #~ }
      #~ 
   #~ }
#~ 
   #~ class gato extends mascota {
       #~ static type = "gato";
       #~ 
       #~ ~ aullar () { 
         #~ << "Miauuu";
      #~ }
   #~ }
#~ 
   #~ class perro extends mascota {
      #~ static type = "perro";
       #~ 
       #~ ~ aullar () { 
         #~ << "Guauuu";
      #~ }
   #~ }
   #~ 
   #~ mac = new gato ("MacAlistair", "Persa"); 
   #~ mac->aullar(); // Imprime "Miauuu"
   #~ mac->saludar(); // Imprime "Hola soy MacAlistair, un gato Persa"
   #~ 
   #~ ada = new perro ("Ada", "Bulldog"); 
   #~ ada->aullar(); // Imprime "Guauuu"
   #~ ada->saludar(); // Imprime "Hola soy Ada, un perro Bulldog"
#~ 
#~ 
#~ class pato {
   #~ ~ sonar () {
      #~ << "Cuack";
   #~ }
#~ }
#~ 
#~ class persona {
   #~ ~ sonar () {
      #~ << "La persona imita el sonido de un pato";
   #~ }
#~ }
#~ 
#~ 
#~ ~ sonar (obj) {
   #~ /*
    #~ * Sea cual sea la clase del objeto, 
    #~ * si tiene el método sonar
    #~ * será llamado
    #~ */
   #~ obj->sonar();
#~ }
#~ 
#~ obj1 = new pato ();
#~ obj2 = new persona ();
#~ sonar (obj1); // Imprime "Cuack"
#~ sonar (obj2); // Imrpime "La persona imita el sonido de un pato"

#~ class A {
   #~ ~ _str () {
      #~ return "A";
   #~ }
   #~ ~ _call (f, a){
    #~ << f;
    #~ << a;
   #~ }
   #~ ~ _get (dat) {
      #~ return "A";
   #~ }
   #~ ~ other (a, b, c) {
      #~ << "OTHER".a.b.c;
   #~ }
#~ }
#~ 
#~ a = new A();
#~ a->p("B", "J", "P");
#~ << a->j;
#~ a->other (1,2,3);

#~ class persona {
      #~ private nombre;
      #~ private apellidos;
      #~ 
      #~ ~ persona (nombre, apellidos) {
         #~ this->nombre = nombre;
         #~ this->apellidos = apellidos;
      #~ }
      #~ 
      #~ ~ _call (meth, params) {
         #~ <."El método ".meth." no existe [ ";
         #~ $(params) <.$.' ';
         #~ << "]";
         #~ return "No existe";
      #~ }
      #~ 
   #~ }
   
   << "A,B,C"->explode (",")
   
   
   #~ p = new persona ('Fco. Javier', 'Bohórquez Ogalla');
   #~ foo = p->test("1", 2, "4"); // Imprime "El método test no existe [ 1 2 4 ]"
   #~ << foo; // Imprime "No existe"

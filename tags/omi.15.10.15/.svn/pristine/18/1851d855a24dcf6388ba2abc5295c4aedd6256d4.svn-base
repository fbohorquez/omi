\section Gestión de memoria

El tarea del interprete gestionar la memoria que utiliza el programa 
para su ejecución, reservando espacio para los distintos datos, 
proporcionando mecanismos para al acceso a los mismo y liberando el
espacio que ya no utilizar para otros uso. 

La gestión de memoria es un aspecto muy importante en todo interprete debido 
a que un uso óptimo de la misma hará que los programas intrepretados requieran 
menos recursos. 

Todo programa que es intrepretado se construye de forma dinámica en forma de 
los denominados nodos ejecutables. Dependiendo del contexto en el que 
se cree el nodo ejecutable la gestión de la memoria será diferente. Así 
podemos distenguir tres tipos de contextos: 

\begin {itemize}
\item Nodos de árbol sintáctico
\item Nodos referenciados
\item Nodos auxiliares
\end{itemize}

Para la gesión de la memoria intervienen varios elementos y conceptos.

\begin {itemize}
	\item Árbol sintáctico (ref)
	\item Nodo ejecutable (ref)
	\item Tabla de símbolos (ref)
	\item Operación de asignación (ref)
	\item Operación de asignación por referencia (ref)
\end {itemize}

\subsection {Nodos de árbol sintáctico}

Cuando un conjunto de sentencias son interpretadas se crea un árbol sintáctico
constituido por nodos ejecutables. Los nodos que representan este árbol son 
creados dinámicamente en memoria. El analizador sintáctico reserva memoria
para cada nodo, construyendo el árbol semático que será interpretado al ejecutarse 
la semántica que encierra cada nodo.

Los nodos que constituyen árbol sintáctico no pueden ser liberados de memoria
hasta la finalice la interpretación. Esto se debe a que la ejecución de 
un nodo puede requerirse en cualquier momento.

Tras finalizar la ejecución del árbol los nodos serán liberados mediante un 
recorrido ascendente. 

\subsection {Nodos referenciados}

\subsection{Nodos auxiliares}

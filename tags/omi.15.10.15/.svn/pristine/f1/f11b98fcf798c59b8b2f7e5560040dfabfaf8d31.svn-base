//expNode.cpp
//----------------------------------------------------------------------
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */
//----------------------------------------------------------------------
#include "runTree.h"
#include "typeNode.h"
#include "stmtNode.h"
#include "fileNode.h"
//~ #include DATABASE

//----------------------------------------------------------------------
runNode* objectTypeNode::getMethod (runNode *key) {
   if (classNode * c = dynamic_cast<classNode*> (getClass())) {
      return c->getMethod (key);
   }
}
refNode* objectTypeNode::getMethodRef (runNode *key) {
   if (classNode * c = dynamic_cast<classNode*> (getClass())) {
      return c->getMethodRef (key);
   }
}
//----------------------------------------------------------------------

//----------------------------------------------------------------------

runNode* expNode::clone (runNode* node) {
   if (dynamic_cast<nullNode*> (node))
      return new nullNode ();
   else if (objectNode * obj = dynamic_cast<objectNode*>(node))
      return obj;
   else if (stringNode* str = dynamic_cast<stringNode*> (node))
      return new strNode (str->strvalue());
   else if (dynamic_cast<fileNode*> (node))
      return node;
   else if (arithNode* n_arith = dynamic_cast<arithNode*> (node))
      return new numNode (n_arith->numvalue());
   else if (logicNode* n_bool = dynamic_cast<logicNode*> (node))
      return new boolNode (n_bool->boolvalue());
   else if (relCNode * rel = dynamic_cast<relCNode*> (node)) 
      return new relCNode (rel);
   else if (dataCNode * data = dynamic_cast<dataCNode*> (node))
      return new dataCNode (data);
   else if (arrayConstNode * n_array = dynamic_cast<arrayConstNode*> (node))
      return new arrayNode(n_array);
   else if (arrayNode * n_array = dynamic_cast<arrayNode*> (node))
      return new arrayNode(n_array);
   else if (regexpNode * n_exp = dynamic_cast<regexpNode*> (node))
      return new regexpNode (n_exp);
   else if (classNode* class_ = dynamic_cast<classNode*> (node))
      return new classNode (class_);
   else if (functionNode* f = dynamic_cast<functionNode*> (node))
      return new functionNode (*f);
   else
      return node->cloneNode(node);
}

runNode* expNode::toString (runNode *&node) {
   if (expNode * n = dynamic_cast<expNode*>(node)) {
      if (stringNode* n_string = dynamic_cast<stringNode*> (node))
         node =  n_string;
      else if (arithNode* n_arith = dynamic_cast<arithNode*> (node))
         node = n_arith;
      else if (boolNode* n_bool = dynamic_cast<boolNode*> (node))
         node = n_bool;
      else if (arrayNode * n_array = dynamic_cast<arrayNode*> (node)) {
         //~ n_array->run();
         //~ node = n_array->copyArray (n_array);
      }
   }
   return node;
}
//----------------------------------------------------------------------


//----------------------------------------------------------------------
runNode* nexpNode::resolved (runNode* &node) {
   nexpNode* nexp;
   while ((nexp = dynamic_cast<nexpNode*> (node)) && !dynamic_cast<fexpNode*> (node) && !dynamic_cast<arrayNode*>(node)&& !dynamic_cast<stringNode*>(node)) {
      nexp->run();
      node = nexp->nodeval();
   }
   return node;
}
//----------------------------------------------------------------------
runNode* nexpNode::resolved (runNode* &node, runNode* &ref) {
   nexpNode* nexp;
   while ((nexp = dynamic_cast<nexpNode*> (node)) && !dynamic_cast<fexpNode*> (node) && !dynamic_cast<arrayNode*>(node)&& !dynamic_cast<stringNode*>(node)) {
      nexp->run();
      
      ref = nexp->getRef();
      node = nexp->nodeval();
   }
   return node;
}
//----------------------------------------------------------------------
runNode* nexpNode::resolvedAsFunction (runNode* &node) {
   if (idNode * idf = dynamic_cast<idNode*> (node)){
      if (idf->existfunction ()){
         idf->runf();
         node =  idf->nodevalf();
      }
   }
   return nexpNode::resolved (node);
}
runNode* nexpNode::resolvedAsFunction (runNode* &node, runNode* &ref) {
   if (idNode * idf = dynamic_cast<idNode*> (node)){
      if (idf->existfunction ()){
         idf->runf();
         node =  idf->nodevalf();
      }
   }
   return nexpNode::resolved (node, ref);
}
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//logicNode
bool logicNode::boolvalue () const {
   return boolvalue_;
}

string logicNode::print () const {
   return (boolvalue_)?"true":"false";
}

runNode* logicNode::nodeval () const {
   return new boolNode (boolvalue_);
}

bool logicNode::to_bool (runNode* node) {
   if (dexpNode * dexp = dynamic_cast<dexpNode*>(node))
      return dexp->boolvalue();
   else if (dynamic_cast<fexpNode*> (node))
      return true;
   return false;
}
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//arithNode
string arithNode::print () const {
   ostringstream oss;
   oss << setprecision(NUMPRECISION);
   oss << numvalue_;
   return oss.str();
}

runNode* arithNode::nodeval () const {
   return new numNode (numvalue_);
}

num arithNode::numvalue () const {
   return numvalue_;
}

num arithNode::to_num (runNode* node, bool exception ) {
   if (dexpNode * dexp = dynamic_cast<dexpNode*>(node))
      return dexp->numvalue();
   else if (exception)
      throw errorException ("Unknown type", "to_num: node  is unknown type ", 1);
   return 0;
}

string arithNode::strvalue () const{
   ostringstream oss;
   oss << setprecision(NUMPRECISION);
   oss << this->numvalue();
   return oss.str();
}
//----------------------------------------------------------------------
num arithNode::dval (runNode* node) {
   if (stringNode *s = dynamic_cast<stringNode*> (node))
      return s->numvalue();
   else if (arithNode *n = dynamic_cast<arithNode*> (node))
      return n->numvalue();
   else if (logicNode *l = dynamic_cast<logicNode*> (node))
      return (double)l->boolvalue();
   else if (arrayNode *a = dynamic_cast<arrayNode*> (node))
      return a->size();
   else
      throw errorException ("Unknown operand", "floatconvNode: node 2 is unknown operand ", 1);
}
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//stringNode
#include "operatorStrNode.h"
#include "operatorRegexpNode.h"
 runNode * stringNode::class_ = NULL;
void stringNode::generateClass () {
   idNode id ("string");
   classNode * c = new classNode (&id, NULL);
   c->run();
   c->setMethod (new strNode ("explode"), explodeNode::asMethod());
   c->setMethod (new strNode ("find"), findNode::asMethod());
   c->setMethod (new strNode ("lower"), lowerNode::asMethod());
   c->setMethod (new strNode ("upper"), upperNode::asMethod());
   c->setMethod (new strNode ("replace"), replaceNode::asMethod());
   c->setMethod (new strNode ("replace_sub"), subreplaceNode::asMethod());
   c->setMethod (new strNode ("search"), searchNode::asMethod());
   c->setMethod (new strNode ("match"), matchNode::asMethod());
   stringNode::class_ =  c;
}

stringNode::stringNode () {

}

string stringNode::print () const {
   ostringstream oss;
   oss << strvalue_;
   return oss.str();
}

runNode* stringNode::nodeval () const {
   return new strNode (strvalue_);
}

string stringNode::strvalue () const {
   return strvalue_;
}

/**
  * Método que obtiene el valor numérico del string.
  * Si el string es un número devuelve su valor, en
  * caso contrario devuelve 0.
  *
  * print "3" + 8 #11
  * print 4 - "str" #0
  *
  */
num stringNode::numvalue () const {
   std::istringstream inpStream (strvalue_);
   num inpValue = 0.0;
   if ((inpStream >> inpValue) && strvalue_.find(" ") == string::npos)
      return inpValue;
   return strvalue_.length();
}
bool stringNode::is_numvalue () const {
   std::istringstream inpStream (strvalue_);
   num inpValue = 0.0;
   if ((inpStream >> inpValue) && strvalue_.find(" ") == string::npos)
      return true;
   return false;
}

string stringNode::to_str (runNode* node) {
   if (dexpNode *dexp = dynamic_cast<dexpNode*>(node))
      return dexp->strvalue();
   else if (refNode * ref = dynamic_cast<refNode*>(node))
      return ref->strvalue();
   else 
      throw errorException ("Unknown operand", "stringNode: not node to string ", 1);
}
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//Comprobación de *node1 < *node2
bool cmp_runNode::operator()(runNode  *node1, runNode *node2) {
   runNode* node_aux1 = node1;
   runNode* node_aux2 = node2;
   idNode* id = dynamic_cast<idNode*> (node_aux1);
   if (id)
      node_aux1 = id->nodeval();
   id = dynamic_cast<idNode*> (node_aux2);
   if (id)
      node_aux2 = id->nodeval();
   expNode* exp = dynamic_cast<expNode*> (node_aux1);
   if (exp)
      node_aux1 = exp;
   exp = dynamic_cast<expNode*> (node_aux2);
   logicNode *l1, *l2; 
   arithNode *n1, *n2;
   stringNode *s1, *s2;
   refNode *k1, *k2;
   l1 = dynamic_cast<logicNode*>(node_aux1);
   l2 = dynamic_cast<logicNode*>(node_aux2);
   n1 = dynamic_cast<arithNode*>(node_aux1);
   n2 = dynamic_cast<arithNode*>(node_aux2);
   s1 = dynamic_cast<stringNode*>(node_aux1);
   s2 = dynamic_cast<stringNode*>(node_aux2);
   k1 = dynamic_cast<refNode*>(node_aux1);
   k2 = dynamic_cast<refNode*>(node_aux2);
   if (s1) {
      if (s2) {
         return s1->strvalue() < s2->strvalue();
      } else if (n2) {
         std::istringstream inpStream(s1->strvalue());
         num inpValue = 0.0;
         if (inpStream >> inpValue)
            return (atof(s1->strvalue().c_str()) < n2->numvalue());
         else
            return false;
      } else if (l2) {
         return (atof(s1->strvalue().c_str()) < l2->boolvalue());
      } else if (k2) {
         return s1->strvalue() < k2->strvalue();
      } else {
         return node1 < node2;
      }
   } else if (k1) {
      if (k2) {
         return k1->strvalue() < k2->strvalue();
      } else if (s2) {
         return k1->strvalue() < s2->strvalue();
      } else if (n2) {
         std::istringstream inpStream(k1->strvalue());
         num inpValue = 0.0;
         if (inpStream >> inpValue)
            return (atof(k1->strvalue().c_str()) < n2->numvalue());
         else
            return false;
      } else if (l2) {
         return (atof(k1->strvalue().c_str()) < l2->boolvalue());
      }  else {
         return node1 < node2;
      }
   } else if (n1) {
      if (s2) {
         std::istringstream inpStream(s2->strvalue());
         num inpValue = 0.0;
         if (inpStream >> inpValue)
            return (n1->numvalue () < atof (s2->strvalue().c_str()));
         else
            return true;
      }else if (k2) {
         std::istringstream inpStream(k2->strvalue());
         num inpValue = 0.0;
         if (inpStream >> inpValue)
            return (n1->numvalue () < atof (k2->strvalue().c_str()));
         else
            return true;
      } else if (n2) {
         return (n1->numvalue() < n2->numvalue());
      } else if (l2) {
         return (n1->numvalue() < l2->boolvalue());
      } else {
         return node1 < node2;
      }
   } else if (l1) {
      if (s2) {
         return (l1->boolvalue () < atof (s2->strvalue().c_str()));
      }else if (k2) {
         return (l1->boolvalue () < atof (k2->strvalue().c_str()));
      } else if (n2) {
         return (l1->boolvalue() < n2->numvalue());
      } else if (l2) {
         return (l1->boolvalue() < l2->boolvalue());
      } else {
         return node1 < node2;
      }
   } else {
      return node1 < node2;
   }
}


//----------------------------------------------------------------------

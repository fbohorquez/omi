#!/usr/local/bin/omi
#=======================================================================
class Tree {
   i;l;r;
   ~ Tree (item, depth) {
      this->i = item;
      if(depth) {
         --depth;
         this->l = new Tree(item * 2 - 1, depth);
         this->r = new Tree(item * 2, depth);
      }
   }
   ~ check() {
      return this->i
         + ((this->l && this->l->l === null) ? this->l->check() : this->l->i)
         - ((this->r && this->r->l === null) ? this->r->check() : this->r->i);
   }
}
#-----------------------------------------------------------------------
minDepth = 4;
ns = size(args); # MIRAR
n = (ns == 2)?args[1]:1;
if ((minDepth + 2) > n) {
   maxDepth = minDepth + 2;
}else{
   maxDepth = n;
}
stretchDepth = maxDepth + 1;
stretch = new Tree(0, stretchDepth);
<< sprintf("stretch tree of depth %d check: %d\n", stretchDepth, stretch->check());
longLivedTree = new Tree(0, maxDepth);
iterations = maxDepth * 2; 
do {
   check = 0;
   for(i = 1; i <= iterations; ++i) {
      b1 = new Tree(i, minDepth);
      b2 = new Tree(-1 * i, minDepth);
      check += b1->check() + b2->check();
   }
   << sprintf("%d trees of depth %d check: %d\n", iterations * 2, minDepth, check);
   minDepth += 2;
   iterations /= 4;
   << minDepth << " -- " << maxDepth;
}
while(minDepth <= maxDepth);
#-----------------------------------------------------------------------
<< sprintf("long lived tree of depth %d check: %d\n", maxDepth, longLivedTree->check());
